let User,CustomErrorHandler,bcrypt,jwtServices;_3f1‍.x([["default",()=>_3f1‍.o]]);_3f1‍.w("../../models",[["User",["User"],function(v){User=v}]]);_3f1‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_3f1‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_3f1‍.w("../../services",[["jwtServices",["jwtServices"],function(v){jwtServices=v}]]);




const loginController={
    async login(req,res,next){
        const {username,password}=req.body;
        try{
            const user=await User.findOne({username});
            if(!user){
                return next(CustomErrorHandler.wrongCredentials());
            }
            const match=await bcrypt.compare(password,user.password);
            if(!match){
                return next(CustomErrorHandler.wrongCredentials('Password is wrong'));
            }
            const access_token= jwtServices.sign({_id:user.id,email:user.email});
            res.json({access_token:access_token});
        }catch(err){
            return next(err);
        }
        
    }
}
_3f1‍.d(loginController);